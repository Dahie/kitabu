## Creating a Resource

In the case of the blog application, you can start by generating a scaffolded Post resource: this will represent a single blog posting. To do this, enter this command in your terminal:

	$ rails generate scaffold Post name:string title:string content:text

<p class="notice">
	While scaffolding will get you up and running quickly, the “one size fits all” code that it generates is unlikely to be a perfect fit for your application. In most cases, you’ll need to customize the generated code. Many experienced Rails developers avoid scaffolding entirely, preferring to write all or most of their source code from scratch.
</p>

The scaffold generator will build 15 files in your application, along with some folders, and edit one more. Here’s a quick overview of what it creates:

<table>
	<thead>
		<tr>
			<th>File</th>
			<th>Purpose</th>
		</tr>
	</thead>

	<tbody>
		<tr>
			<td>db/migrate/20100207214725_create_posts.rb.rb</td>
			<td>Migration to create the posts table in your database (your name will include a different timestamp)</td>
		</tr>

		<tr>
			<td>app/models/post.rb</td>
			<td>The Post model</td>
		</tr>

		<tr>
			<td>test/fixtures/posts.yml</td>
			<td>Dummy posts for use in testing</td>
		</tr>

		<tr>
			<td>app/controllers/posts_controller.rb</td>
			<td>The Posts controller</td>
		</tr>

		<tr>
			<td>app/views/posts/index.html.erb</td>
			<td>A view to display an index of all posts</td>
		</tr>

		<tr>
			<td>db/migrate/20100207214725_create_posts.rb</td>
			<td>Migration to create the posts table in your database (your name will include a different timestamp)
			</td>
		</tr>

		<tr>
			<td>app/views/posts/edit.html.erb</td>
			<td>A view to edit an existing post</td>
		</tr>

		<tr>
			<td>app/views/posts/show.html.erb</td>
			<td>A view to display a single post</td>
		</tr>

		<tr>
			<td>app/views/posts/_form.html.erb</td>
			<td>A partial to control the overall look and feel of the form used in edit and new views</td>
		</tr>

		<tr>
			<td>app/helpers/posts_helper.rb</td>
			<td>Helper functions to be used from the post views</td>
		</tr>

		<tr>
			<td>test/unit/post_test.rb</td>
			<td>Unit testing harness for the posts model</td>
		</tr>

		<tr>
			<td>test/functional/posts_controller_test.rb</td>
			<td>Functional testing harness for the posts controller</td>
		</tr>

		<tr>
			<td>test/unit/helpers/posts_helper_test.rb</td>
			<td>Unit testing harness for the posts helper</td>
		</tr>

		<tr>
			<td>config/routes.rb</td>
			<td>Edited to include routing information for posts</td>
		</tr>

		<tr>
			<td>public/stylesheets/scaffold.css</td>
			<td>Cascading style sheet to make the scaffolded views look better</td>
		</tr>
	</tbody>
</table>

### Running a Migration

One of the products of the `rails generate scaffold` command is a database *migration*. Migrations are Ruby classes that are designed to make it simple to create and modify database tables. Rails uses rake commands to run migrations, and it’s possible to undo a migration after it’s been applied to your database. Migration filenames include a timestamp to ensure that they’re processed in the order that they were created.

If you look in the `db/migrate/20100207214725_create_posts.rb` file (remember, yours will have a slightly different name), here’s what you’ll find:

@@@ ruby
class CreatePosts < ActiveRecord::Migration
  def self.up
    create_table :posts do |t|
      t.string :name
      t.string :title
      t.text :content

      t.timestamps
    end
  end

  def self.down
    drop_table :posts
  end
end
@@@

The above migration creates two methods, `up`, called when you run this migration into the database, and `down` in case you need to reverse the changes made by this migration at a later date. The up command in this case creates a posts table with two string columns and a text column. It also creates two timestamp fields to track record creation and updating. More information about Rails migrations can be found in the [Rails Database Migrations](http://guides.rubyonrails.org/migrations.html) guide.

At this point, you can use a rake command to run the migration:

	$ rake db:migrate

Rails will execute this migration command and tell you it created the Posts table.

	==  CreatePosts: migrating ===========
	-- create_table(:posts)
	   -> 0.0019s
	==  CreatePosts: migrated (0.0020s) ==

<p class="notice">
	Because you’re working in the development environment by default, this command will apply to the database defined in the <code>development</code> section of your <code>config/database.yml</code> file.
</p>

### Adding a Link

To hook the posts up to the home page you’ve already created, you can add a link to the home page. Open `app/views/home/index.html.erb` and modify it as follows:

	<h1>Hello, Rails!</h1> <%= link_to "My Blog", posts_path %>

The `link_to` method is one of Rails’ built-in view helpers. It creates a hyperlink based on text to display and where to go – in this case, to the path for posts.

### Working with Posts in the Browser

<p class="figure">
	<img src="../images/posts_index.png" alt="Post index page" />
</p>

Now you’re ready to start working with posts. To do that, navigate to <http://localhost:3000> and then click the “My Blog” link:

This is the result of Rails rendering the `index` view of your posts. There aren’t currently any posts in the database, but if you click the `New Post` link you can create one. After that, you’ll find that you can edit posts, look at their details, or destroy them. All of the logic and HTML to handle this was built by the single `rails generate scaffold` command.

<p class="notice">
	In development mode (which is what you’re working in by default), Rails reloads your application with every browser request, so there’s no need to stop and restart the web server.
</p>

Congratulations, you’re riding the rails! Now it’s time to see how it all works.

### The Model

The model file, `app/models/post.rb` is about as simple as it can get:

@@@ ruby
class Post < ActiveRecord::Base
end
@@@

There isn’t much to this file – but note that the `Post` class inherits from `ActiveRecord::Base`. Active Record supplies a great deal of functionality to your Rails models for free, including basic database CRUD (Create, Read, Update, Destroy) operations, data validation, as well as sophisticated search support and the ability to relate multiple models to one another.

### Adding Some Validation

Rails includes methods to help you validate the data that you send to models. Open the `app/models/post.rb` file and edit it:

@@@ ruby
class Post < ActiveRecord::Base
  validates :name,  :presence => true
  validates :title, :presence => true,
                    :length => { :minimum => 5 }
end
@@@

These changes will ensure that all posts have a name and a title, and that the title is at least five characters long. Rails can validate a variety of conditions in a model, including the presence or uniqueness of columns, their format, and the existence of associated objects.

### Using the Console

To see your validations in action, you can use the console. The console is a command-line tool that lets you execute Ruby code in the context of your application:

	$ rails console

After the console loads, you can use it to work with your application’s models:

@@@ text
>> p = Post.new(:content => "A new post")
=> #<Post id: nil, name: nil, title: nil,
     content: "A new post", created_at: nil,
     updated_at: nil>
>> p.save
=> false
>> p.errors
=> #<OrderedHash { :title=>["can't be blank",
                           "is too short (minimum is 5 characters)"],
                   :name=>["can't be blank"] }>
@@@

This code shows creating a new `Post` instance, attempting to save it and getting `false` for a return value (indicating that the save failed), and inspecting the errors of the post.

When you’re finished, type `exit` and hit `return` to exit the console.

<p class="notice">
	Unlike the development web server, the console does not automatically load your code afresh for each line. If you make changes to your models while the console is open, type reload! at the console prompt to load them.
</p>

### Listing All Posts

The easiest place to start looking at functionality is with the code that lists all posts. Open the file `app/controllers/posts_controller.rb` and look at the `index` action:

@@@ ruby
def index
  @posts = Post.all

  respond_to do |format|
    format.html # index.html.erb
    format.xml  { render :xml => @posts }
  end
end
@@@

`Post.all` calls the `Post` model to return all of the posts currently in the database. The result of this call is an array containing the posts which has been saved in an instance variable called `@posts`.

<p class="notice">
	For more information on finding records with Active Record, see <a href="http://guides.rubyonrails.org/active_record_querying.html" title="Ruby on Rails Guides: Active Record Query Interface">Active Record Query Interface</a>.
</p>

The respond_to block handles both HTML and XML calls to this action. If you browse to <http://localhost:3000/posts.xml>, you’ll see all of the posts in XML format. The HTML format looks for a view in `app/views/posts/` with a name that corresponds to the action name. Rails makes all of the instance variables from the action available to the view. Here’s `app/views/posts/index.html.erb`:

@@@ html
<h1>Listing posts</h1>

<table>
  <tr>
    <th>Name</th>
    <th>Title</th>
    <th>Content</th>
    <th></th>
    <th></th>
    <th></th>
  </tr>

<% @posts.each do |post| %>
  <tr>
    <td><%= post.name %></td>
    <td><%= post.title %></td>
    <td><%= post.content %></td>
    <td><%= link_to 'Show', post %></td>
    <td><%= link_to 'Edit', edit_post_path(post) %></td>
    <td><%= link_to 'Destroy', post, :confirm => 'Are you sure?', :method => :delete %></td>
  </tr>
<% end %>
</table>

<br />

<%= link_to 'New post', new_post_path %>
@@@

This view iterates over the contents of the `@posts` array to display content and links. A few things to note in the view:

* `link_to` builds a hyperlink to a particular destination
* `edit_post_path` and `new_post_path` are helpers that Rails provides as part of RESTful routing. You’ll see a variety of these helpers for the different actions that the controller includes.

<p class="notice">
	In previous versions of Rails, you had to use <code>&lt;%=h post.name %></code> so that any HTML would be escaped before being inserted into the page. In Rails 3.0, this is now the default. To get unescaped HTML, you now use <code>&lt;%= raw post.name %></code>. For more details on the rendering process, see <a href="http://guides.rubyonrails.org/layouts_and_rendering.html" title="Ruby on Rails Guides: Layouts and Rendering in Rails">Layouts and Rendering in Rails</a>.
</p>

### Customizing the Layout

The view is only part of the story of how HTML is displayed in your web browser. Rails also has the concept of *layouts*, which are containers for views. When Rails renders a view to the browser, it does so by putting the view’s HTML into a layout’s HTML. In previous versions of Rails, the `rails generate scaffold` command would automatically create a controller specific layout, like `app/views/layouts/posts.html.erb`, for the posts controller. However this has been changed in Rails 3.0. A application specific layout is used for all the controllers and can be found in `app/views/layouts/application.html.erb`. Open this layout in your editor and modify the body tag:

@@@ html
<!DOCTYPE html>
<html>
<head>
  <title>Blog</title>
  <%= stylesheet_link_tag :all %>
  <%= javascript_include_tag :defaults %>
  <%= csrf_meta_tag %>
</head>
<body style="background: #EEEEEE;">

<%= yield %>

</body>
</html>
@@@

Now when you refresh the `/posts` page, you’ll see a gray background to the page. This same gray background will be used throughout all the views for posts.

### Creating New Posts

Creating a new post involves two actions. The first is the `new` action, which instantiates an empty `Post` object:

@@@ ruby
def new
  @post = Post.new

  respond_to do |format|
    format.html # new.html.erb
    format.xml  { render :xml => @post }
  end
end
@@@

The `new.html.erb` view displays this empty `Post` to the user:

@@@ html
<h1>New post</h1>

<%= render 'form' %>

<%= link_to 'Back', posts_path %>
@@@

The `<%= render 'form' %>` line is our first introduction to *partials* in Rails. A partial is a snippet of HTML and Ruby code that can be reused in multiple locations. In this case, the form used to make a new post, is basically identical to a form used to edit a post, both have text fields for the name and title and a text area for the content with a button to make a new post or update the existing post.

If you take a look at `views/posts/_form.html.erb` file, you will see the following:

@@@ html
<%= form_for(@post) do |f| %>
  <% if @post.errors.any? %>
  <div id="errorExplanation">
    <h2><%= pluralize(@post.errors.count, "error") %> prohibited this post from being saved:</h2>
    <ul>
    <% @post.errors.full_messages.each do |msg| %>
      <li><%= msg %></li>
    <% end %>
    </ul>
  </div>
  <% end %>

  <div class="field">
    <%= f.label :name %><br />
    <%= f.text_field :name %>
  </div>
  <div class="field">
    <%= f.label :title %><br />
    <%= f.text_field :title %>
  </div>
  <div class="field">
    <%= f.label :content %><br />
    <%= f.text_area :content %>
  </div>
  <div class="actions">
    <%= f.submit %>
  </div>
<% end %>
@@@

This partial receives all the instance variables defined in the calling view file, so in this case, the controller assigned the new `Post` object to `@post` and so, this is available in both the view and partial as `@post`.

For more information on partials, refer to the [Layouts and Rendering in Rails](http://guides.rubyonrails.org/layouts_and_rendering.html#using-partials) guide.

The `form_for` block is used to create an HTML form. Within this block, you have access to methods to build various controls on the form. For example, `f.text_field :name` tells Rails to create a text input on the form, and to hook it up to the `name` attribute of the instance being displayed. You can only use these methods with attributes of the model that the form is based on (in this case `name`, `title`, and `content`). Rails uses `form_for` in preference to having you write raw HTML because the code is more succinct, and because it explicitly ties the form to a particular model instance.

The `form_for` block is also smart enough to work out if you are doing a *New Post* or an *Edit Post* action, and will set the form `action` tags and submit button names appropriately in the HTML output.

<p class="notice">
	If you need to create an HTML form that displays arbitrary fields, not tied to a model, you should use the <code>form_tag</code> method, which provides shortcuts for building forms that are not necessarily tied to a model instance.
</p>

When the user clicks the *Create Post* button on this form, the browser will send information back to the create method of the controller (Rails knows to call the `create` method because the form is sent with an HTTP POST request; that’s one of the conventions that I mentioned earlier):

@@@ ruby
def create
  @post = Post.new(params[:post])

  respond_to do |format|
    if @post.save
      format.html { redirect_to(@post,
                    :notice => 'Post was successfully created.') }
      format.xml  { render :xml => @post,
                    :status => :created, :location => @post }
    else
      format.html { render :action => "new" }
      format.xml  { render :xml => @post.errors,
                    :status => :unprocessable_entity }
    end
  end
end
@@@

The `create` action instantiates a new Post object from the data supplied by the user on the form, which Rails makes available in the `params` hash. After successfully saving the new post, `create` returns the appropriate format that the user has requested (HTML in our case). It then redirects the user to the resulting post show action and sets a notice to the user that the Post was successfully created.

If the post was not successfully saved, due to a validation error, then the controller returns the user back to the new action with any error messages so that the user has the chance to fix the error and try again.

The “Post was successfully created” message is stored inside of the Rails `flash` hash, (usually just called the Flash) so that messages can be carried over to another action, providing the user with useful information on the status of their request. In the case of `create`, the user never actually sees any page rendered during the Post creation process, because it immediately redirects to the new Post as soon Rails saves the record. The Flash carries over a message to the next action, so that when the user is redirected back to the `show` action, they are presented with a message saying “Post was successfully created.”

### Showing an Individual Post

When you click the `show` link for a post on the index page, it will bring you to a URL like `http://localhost:3000/posts/1`. Rails interprets this as a call to the `show` action for the resource, and passes in `1` as the `:id` parameter. Here’s the show action:

@@@ ruby
def show
  @post = Post.find(params[:id])

  respond_to do |format|
    format.html # show.html.erb
    format.xml  { render :xml => @post }
  end
end
@@@

The `show` action uses `Post.find` to search for a single record in the database by its id value. After finding the record, Rails displays it by using `show.html.erb`:

@@@ html
<p class="notice"><%= notice %></p>

<p>
  <b>Name:</b>
  <%= @post.name %>
</p>

<p>
  <b>Title:</b>
  <%= @post.title %>
</p>

<p>
  <b>Content:</b>
  <%= @post.content %>
</p>

<%= link_to 'Edit', edit_post_path(@post) %> |
<%= link_to 'Back', posts_path %>
@@@

### Editing Posts

Like creating a new post, editing a post is a two-part process. The first step is a request to `edit_post_path(@post)` with a particular post. This calls the `edit` action in the controller:

@@@ ruby
def edit
  @post = Post.find(params[:id])
end
@@@

After finding the requested post, Rails uses the `edit.html.erb` view to display it:

@@@ html
<h1>Editing post</h1>

<%= render 'form' %>

<%= link_to 'Show', @post %> |
<%= link_to 'Back', posts_path %>
@@@

Again, as with the `new` action, the `edit` action is using the `form` partial, this time however, the form will do a PUT action to the PostsController and the submit button will display “Update Post”.

Submitting the form created by this view will invoke the `update` action within the controller:

@@@ ruby
def update
  @post = Post.find(params[:id])

  respond_to do |format|
    if @post.update_attributes(params[:post])
      format.html { redirect_to(@post,
                    :notice => 'Post was successfully updated.') }
      format.xml  { head :ok }
    else
      format.html { render :action => "edit" }
      format.xml  { render :xml => @post.errors,
                    :status => :unprocessable_entity }
    end
  end
end
@@@

In the `update` action, Rails first uses the `:id` parameter passed back from the edit view to locate the database record that’s being edited. The `update_attributes` call then takes the rest of the parameters from the request and applies them to this record. If all goes well, the user is redirected to the post’s `show` view. If there are any problems, it’s back to the `edit` view to correct them.

#### Destroying a Post

Finally, clicking one of the `destroy` links sends the associated id to the destroy action:

@@@ ruby
def destroy
  @post = Post.find(params[:id])
  @post.destroy

  respond_to do |format|
    format.html { redirect_to(posts_url) }
    format.xml  { head :ok }
  end
end
@@@

The `destroy` method of an Active Record model instance removes the corresponding record from the database. After that’s done, there isn’t any record to display, so Rails redirects the user’s browser to the index view for the model.